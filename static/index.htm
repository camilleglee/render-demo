<html><head>
  <title>INFO 4310/5311: Homework 1</title>
  
    <script src="https://d3js.org/d3.v6.min.js"></script>
    <script src="https://d3js.org/topojson.v2.min.js"></script>
  
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Condensed:wght@500;600;700;800;900&family=Roboto:wght@300;400&display=swap" rel="stylesheet">
    
    <style>
        .neighborhood {
            fill: #eee;
            stroke: white;
            stroke-width: 1.5px;
            opacity: 1;
        }
        body {
            margin: 0 100 200 150;
            padding: 0;
            font-family: 'Roboto', sans-serif;
        }
        a {
            color: #347235;
        }
        p {
            font-weight: 300;
            font-size: 1.1em;
            line-height: 1.5em;
        }
        ul li {
            line-height: 1.5em;
        }
        h1 {
            font-family: 'Roboto Condensed', sans-serif;    
            font-weight: 900;
            font-size: 5.2em;
            margin: 0 0 20 0;
            padding: 0;
            line-height: 1.05em;
        }
        h2 {
            font-family: 'Roboto Condensed', sans-serif;    
            font-weight: 500;
            font-size: 1.7em;
            margin: 0 0 40 0;
            padding: 0;
            line-height: 1.3;
        }
        h3 {
            font-size: 1.2em;
            margin: 0; 
            padding: 0;  
            color: #264116;
        }
        h4 {
            font-size: 1.4em;
        }
        hr {
            border-top: 3px solid #264116;width:40%;margin-top: 35; margin-bottom: 30;
        }
        .captionContainer {
            width: 1203px;
            height:700px;
            background-color: white;
            background-size: cover;
            background-image: url('embarcadero4.png');
            background-repeat: no-repeat;
            background-position:  right -530px top 0;
        }
        .caption {
            padding:690px 0 0 0;text-align:right;font-size: .98em;
        }
        .articleContainer {
            width: 600px;float: left; margin-top:-600px;padding: 90 80 0 0;background-color: white;
        }
        .palmMapContainer {
            width: 700px; height: 700px; margin-top: -20px; float: left;
        }
        .allTreeContainer {
            margin-top: 0; padding-top: 50px;clear: both;
        }
        .allTreeContainer {
            margin-top: 0; padding-top: 50px;clear: both;
        }
        .palmTreeContainer, .sourceContainer {
            margin-top: 80;
        }
    </style>
  
</head>
<body>
    <div class="container">
        <!-- Caption for the photo -->
        <div class="captionContainer">
            <p class="caption">Ferry Building, 249 The Embarcadero, San Francisco, CA</p>
        </div>
        <!-- Article -->
        <div style="float: left;">
            <div class="articleContainer">
                <h1>The Great<br>San Francisco<br>Palm Controversy</h1>
                <h2>Residents debate the merits of planting palm trees after the 1989 Loma Prieta earthquake</h2>
                <div style="margin-left: 190px">
                    <p>
                        In 1989, the Loma Prieta earthquake shook San Francisco killing 63 people, injuring 3,757, 
                        and causing an estimated $7 billion in property damage. This 5.9 magnitude earthquake is considered 
                        the worst disaster to hit San Francisco since the great earthquake of 1906.
                    </p>
                    <p>
                        Part of the effort to rebuild San Francisco included planting trees. From 1990 to 2006,  
                        the City of San Francisco planted thousands of trees including hundreds 
                        of palms along major thoroughfares and the eastern shorefront. In 2004, Mayor Newsom 
                        launched the "Trees for Tomorrow" campaign pledging to plant 25,000 new trees within five years. 
                        In 2015, the city renewed it's commitment to urban forestry when the Board of Advisors authorized a 
                        comprehensive Urban Forest Plan.
                    </p>
                    <p>    
                        Some residents contested the city's choice to plant palms citing the dangers of planting so many 
                        sunloving trees in Northen California, the lack of shade provided by palms, and 
                        the concern that San Francisco would lose its distinctiveness by emulating Southern California cities. 
                        In contrast, other residents were delighted to see palms in the city.
                    </p>
                    <hr>
                    <h3>Notes about the data</h3>
                    <p style="color: #264116;margin-top:5;">
                        <strong>Figure 1</strong> maps all the palm trees listed in San Francisco's Street Tree List. 
                        However, it seems that the database has incomplete data for the dates on which palm
                        trees have been planted. There is a discrepancy between the reported number of new palms 
                        planted since 1990 versus the number of listed with date of planting.
                    </p>
                </div>
            </div>
            <!-- -----------------------
                    MAP (PALM TREES)
                 ----------------------- -->
            <div class="palmMapContainer">
                <svg id="palmTrees" height="800" width="700" style="background: #fff;" >
                    <!-- Ferry Building -->
                    <text x="550" y="235" fill="#DC381F">Ferry Building</text>
                    <line x1="506" y1="36" x2="526" y2="36" style="stroke:#DC381F;stroke-width:2" />
                    <line x1="526" y1="35" x2="526" y2="220" style="stroke:#DC381F;stroke-width:2" />
                    <!-- Title -->
                    <text x="78" y="780" style="font-size: 1.4em;">Figure 1: All palm trees in San Francisco</text>
                    <!-- Legend -->
                    <circle cx="87" cy="720" r="8" fill="#264116" />
                    <text x="105" y="726" fill="black">Palm trees with plant date</text>
                    <circle cx="330" cy="720" r="6" fill="#4E9258" />
                    <text x="348" y="726" fill="black">Palm trees without plant date</text>  
                </svg>
            </div>
        </div>

    <!-- ---------------------------
            HISTOGRAM (ALL TREES)
         --------------------------- -->
    <div class="allTreeContainer">
        <h4>Figure 2: Annual Counts of All Trees Planted in San Francisco (1972-2022)</h4>
        <svg id="allTreeHistogram" height="560" width="1300" >       
            <!-- 1989 Loma Prieta -->
            <text x="472" y="13" fill="#DC381F">Loma Prieta Earthquake</text>
            <text x="472" y="33" fill="#DC381F">October 17, 1989</text>
            <text x="480" y="210" fill="#444" style="font-size: .8em;font-style:italic;">1990-2006: $1.9 million spent to plant trees</text>
            <line x1="472" y1="47" x2="472" y2="500" style="stroke:#DC381F;stroke-width:2" />
            <circle cx="472" cy="47" r="5" stroke="#DC381F" stroke-width="2" fill="#DC381F" />
            <rect width="412" height="280" x="479" y="218" fill="#4E9258" opacity=".1" />
            <!-- 2004 Trees for Tomorrow -->
            <text x="830" y="13" fill="#DC381F">Mayor Newsom authorizes</text>
            <text x="830" y="33" fill="#DC381F">Trees for Tomorrow (2004)</text>
            <text x="843" y="53" fill="#444" style="font-size: .8em;font-style:italic;">2005-2010: 26,408 trees planted</text>
            <line x1="830" y1="47" x2="830" y2="500" style="stroke:#DC381F;stroke-width:2" />
            <circle cx="830" cy="47" r="5" stroke="#DC381F" stroke-width="2" fill="#DC381F" />
            <rect width="121" height="440" x="843" y="60" fill="#4E9258" opacity=".1" />
            <!-- 2015 Urban Forest Plan -->
            <text x="1097" y="13" fill="#DC381F">Board of Advisors approve</text>
            <text x="1097" y="33" fill="#DC381F">Urban Forest Plan (2015)</text>              
            <line x1="1097" y1="47" x2="1097" y2="500" style="stroke:#DC381F;stroke-width:2" />
            <circle cx="1097" cy="47" r="5" stroke="#DC381F" stroke-width="2" fill="#DC381F" />
            <rect width="195" height="260" x="1086" y="240" fill="#4E9258" opacity=".1" />
            <!-- Legend -->
            <rect width="15" height="15" x="37" y="540" fill="#264116" />
            <text x="60" y="553" fill="black">Palm trees</text>
            <rect width="15" height="15" x="170" y="540" fill="#4E9258" />
            <text x="193" y="553" fill="black">All other trees</text>                      
        </svg>
    </div>

    <!-- ----------------------------
            HISTOGRAM (PALM TREES)
         ---------------------------- -->      
    <div class="palmTreeContainer">
        <h4>Figure 3: Annual Counts of Palm Trees Planted in San Francisco (1972-2022)</h4>
        <svg id="palmTreeHistogram" height="300" width="1300" >        
        
        </svg>
    </div>

    <!-- SOURCES -->
    <div class="sourceContainer">
    <h4>Related Links</h4>
    <ul>
        <li>Loma Prieta: Looking Back on the Earthquake 33 Years Later
            (<a href="https://www.nbcbayarea.com/news/local/loma-prieta-earthquake-33-years-later/3032484/">https://www.nbcbayarea.com/news/local/loma-prieta-earthquake-33-years-later/3032484/</a>)</li>
        <li>Market Street palm trees start to do damage (<a href="https://abc7news.com/archive/6338096/">https://abc7news.com/archive/6338096/</a>)</li>
            <li>PALMS POP UP ALL OVER S.F. (<a href="https://www.sfgate.com/news/article/PALMS-POP-UP-ALL-OVER-S-F-Since-the-1989-2497705.php">https://www.sfgate.com/news/article/PALMS-POP-UP-ALL-OVER-S-F-Since-the-1989-2497705.php</a>)</li>
        <li>San Francisco Street Tree List (<a href="https://data.sfgov.org/City-Infrastructure/Street-Tree-List/tkzw-k3nq/about_data">https://data.sfgov.org/City-Infrastructure/Street-Tree-List/tkzw-k3nq/about_data</a>)</li>
        <li>SF Meets Goal of 25,000 Trees
            (<a href="https://www.sfenvironment.org/press/sf-meets-goal-25000-trees">https://www.sfenvironment.org/press/sf-meets-goal-25000-trees</a>)</li>
        <li>Urban Forest Plan (<a href="https://sfplanning.org/urban-forest-plan#about">https://sfplanning.org/urban-forest-plan#about</a>)</li>
    </ul>
    </div>



    <!-- ===================================
            SCRIPT: HISTOGRAM (ALL TREES) 
         =================================== -->
    <script id="notes1">

        // https://observablehq.com/@d3/d3-bin-time-thresholds
        function thresholdTime(n) {
            return (data, min, max) => {
                return d3.scaleUtc().domain([min, max]).ticks(n);
                };
            }

        // Declare chart dimensions and margins.
        const allChart = d3.select("svg#allTreeHistogram");
        const allWidth = allChart.attr("width");
        const allHeight = allChart.attr("height");
        const allMargin = {top: 60, right: 20, bottom: 60, left: 40};
        const allChartWidth = allWidth - allMargin.left - allMargin.right;
        const allChartHeight = allHeight - allMargin.top - allMargin.bottom;
        
        // loadAllTrees
        const loadAllTrees = async function() {
                
            // DATA
            let allTrees = await d3.csv("allTrees-04.csv", d3.autoType )
            console.log("Dataset: ", allTrees )

            // Time parser; convert string to year
            let parser = d3.timeParse("%m/%e/%y")

            // loop for each item array, d is each item
            allTrees.forEach(d => {
                d.date = parser(d.PlantDate)
                d.modSpecies = "Other"
                if(d.qSpecies.includes("Palm")) { //if qSpecies contains "Palm"
                    d.modSpecies = "Palm" //set modSpecies to "Palm"
                    // console.log(d)
                }
                else if(d.qSpecies.includes("Strawberry")) {
                    d.modSpecies = "Strawberry"
                }
            })

            // Bin the data by date; setting the threshold to 51 divides the bins into one per year
            const bins = d3.bin()
                .thresholds(thresholdTime(51))
                .value((d) => d.date)
                (allTrees);
            
            // group the records by modSpecies (Palm or Other)
            bins.forEach ( bin => {
                bin.groups = d3.group(bin, d => d.modSpecies)
            })
            
            // select the first bin and create fake date to make full width bin
            bins[0].x0 = parser("12/31/71");
            bins[bins.length - 1].x1 = parser("12/31/22");

            // Declare the x (horizontal position) scale.
            const x = d3.scaleTime()
                .domain([bins[0].x0, bins[bins.length - 1].x1]) // x0 is starting position of bin (date); x1 is ending date of bin
                .range([allMargin.left, allWidth - allMargin.right]);

            // Declare the y (vertical position) scale.
            const y = d3.scaleLinear()
                .domain([0, d3.max(bins, (d) => d.length)]) // length is number of items in array
                .range([allHeight - allMargin.bottom, allMargin.top]);

            // Create the SVG container.
            const svg = d3.select("svg#allTreeHistogram")
                .attr("width", allWidth)
                .attr("height", allHeight)
                .attr("viewBox", [0, 0, allWidth, allHeight])
                .attr("style", "max-width: 100%; height: auto;");

            // Add a rect for each bin
            let barBins = svg.append("g")
                .selectAll()
                .data(bins)
                .join("g")
                .each(function(d) {//run this function for each bin
                    console.log(this, d) // "this" can be used with "function", not with =>
                    
                    // figure out height of palm bin
                    let palmCount = 0; //by default palmCount is 0
                    if(d.groups.has("Palm")){
                       palmCount = d.groups.get("Palm").length
                    }

                    // figure out height of strawberry tree bin
                    // let strawberryCount = 0; //by default strawberryCount is 0
                    // if(d.groups.has("Strawberry")){
                    //     strawberryCount = d.groups.get("Strawberry").length
                    // }

                    let g = d3.select(this)
                    g.append("rect").attr("fill", "#264116")
                    .attr("x", (d) => x(d.x0) + 1) // d.x0 is start date of bin; this creates the pixel position; x is scale time 
                    .attr("width", (d) => x(d.x1) - x(d.x0) - 1)
                    .attr("y", (d) => y(palmCount)) // count
                    .attr("height", (d) => y(0) - y(palmCount));

                    // g.append("rect").attr("fill", "#4E9258")
                    // .attr("x", (d) => x(d.x0) + 1) // d.x0 is start date of bin; this creates the pixel position; x is scale time 
                    // .attr("width", (d) => x(d.x1) - x(d.x0) - 1)
                    // .attr("y", (d) => y(strawberryCount + palmCount))
                    // .attr("height", (d) => y(palmCount) - y(strawberryCount + palmCount));

                    g.append("rect").attr("fill", "#4E9258")
                    .attr("x", (d) => x(d.x0) + 1) // d.x0 is start date of bin; this creates the pixel position; x is scale time 
                    .attr("width", (d) => x(d.x1) - x(d.x0) - 1)
                    .attr("y", (d) => y(d.length)) // full count
                    //.attr("height", (d) => y(strawberryCount + palmCount) - y(d.length));
                    .attr("height", (d) => y(palmCount) - y(d.length));
                })

            // Add the x-axis and label.
            svg.append("g")
                .attr("transform", `translate(0,${allHeight - allMargin.bottom + 5})`)
                .call(d3.axisBottom(x).ticks(allWidth / 60).tickSizeOuter(0))
                .call((g) => g.append("text")
                    .attr("x", allWidth)
                    .attr("y", allMargin.bottom - 20)
                    .attr("fill", "currentColor")
                    .attr("text-anchor", "end")
                    .text("Year Planted"));

            // Add the y-axis and label, and remove the domain line.
            svg.append("g")
                .attr("transform", `translate(${allMargin.left - 5},0)`)
                .call(d3.axisLeft(y).ticks(allHeight / 40))
                .call((g) => g.select(".domain").remove())
                .call((g) => g.append("text")
                    .attr("x", -allMargin.left + 5)
                    .attr("y", 10)
                    .attr("fill", "currentColor")
                    .attr("text-anchor", "start")
                    .text("Number of Plantings"));

        }
        loadAllTrees();

    </script>
    

    <!-- ====================================
            SCRIPT: HISTOGRAM (PALM TREES) 
         ==================================== -->
    <script id="notes2">

        // Declare chart dimensions and margins.
        const palmChart = d3.select("svg#palmTreeHistogram");
        const palmWidth = palmChart.attr("width");
        const palmHeight = palmChart.attr("height");
        const palmMargin = {top: 20, right: 20, bottom: 40, left: 40};
        const palmChartWidth = palmWidth - palmMargin.left - palmMargin.right;
        const palmChartHeight = palmHeight - palmMargin.top - palmMargin.bottom;
        
        // loadPalmTrees
        const loadPalmTrees = async function() {
                
            // DATA: palm trees
            let palmTrees = await d3.csv("palmTrees-03.csv", d3.autoType )

            // Time parser; Convert string to year.
            let parser = d3.timeParse("%m/%e/%y")

            // loop for each item array, d is each item
            palmTrees.forEach(d => {
                d.date = parser(d.PlantDate)
            })

            // Bin the data.
            const bins = d3.bin()
                .thresholds(thresholdTime(50))
                .value((d) => d.date)
                (palmTrees);

                console.log(bins)

            // Select the first bin and create fake date to make full width bin.
            bins[0].x0 = parser("12/31/71");
            bins[bins.length - 1].x1 = parser("12/31/21");

            // Declare the x (horizontal position) scale.
            const x = d3.scaleTime()
                .domain([bins[0].x0, bins[bins.length - 1].x1])
                .range([palmMargin.left, palmWidth - palmMargin.right]);

            // Declare the y (vertical position) scale.
            const y = d3.scaleLinear()
                .domain([0, d3.max(bins, (d) => d.length)])
                .range([palmHeight - palmMargin.bottom, palmMargin.top]);

            // Create the SVG container.
            const svg = d3.select("svg#palmTreeHistogram")
                .attr("width", palmWidth)
                .attr("height", palmHeight)
                .attr("viewBox", [0, 0, palmWidth, palmHeight])
                .attr("style", "max-width: 100%; height: auto;");

            // Add a rect for each bin.
            svg.append("g")
                .attr("fill", "#264116") // Medium forest green: #347235
                .selectAll()
                .data(bins)
                .join("rect")
                .attr("x", (d) => x(d.x0) + 1)
                .attr("width", (d) => x(d.x1) - x(d.x0) - 1)
                .attr("y", (d) => y(d.length))
                .attr("height", (d) => y(0) - y(d.length));

            // Add the x-axis and label.
            svg.append("g")
                .attr("transform", `translate(0,${palmHeight - palmMargin.bottom + 5})`)
                .call(d3.axisBottom(x).ticks(allWidth / 80).tickSizeOuter(0))
                .call((g) => g.append("text")
                    .attr("x", palmWidth)
                    .attr("y", palmMargin.bottom - 5 )
                    .attr("fill", "currentColor")
                    .attr("text-anchor", "end")
                    .text("Year Planted"));

            // Add the y-axis and label and remove the domain line.
            svg.append("g")
                .attr("transform", `translate(${palmMargin.left - 5},0)`)
                .call(d3.axisLeft(y).ticks(palmHeight / 60))
                .call((g) => g.select(".domain").remove())
                .call((g) => g.append("text")
                    .attr("x", -palmMargin.left + 5)
                    .attr("y", 10)
                    .attr("fill", "currentColor")
                    .attr("text-anchor", "start")
                    .text("Number of Plantings"));

        };
        loadPalmTrees();

    </script>
    
    
    <!-- ==================================
              SCRIPT: MAP (PALM TREES) 
         ================================== -->
    <script id="notes3">
  
        const PALMsvg = d3.select("svg#palmTrees");
        const width = PALMsvg.attr("width");
        const height = PALMsvg.attr("height");
        const margin = { top: 0, right: 20, bottom: 70, left: 20 };
        const mapWidth = width - margin.left - margin.right;
        const mapHeight = height - margin.top - margin.bottom;
        const map = PALMsvg.append("g")
                           .attr("transform","translate("+margin.left+","+margin.top+")");

        // Create data point for Ferry Building
        const ferryBuilding = [
            {long: -122.3937, lat: 37.7955} // Ferry Building
        ];

        // Create visualization
        const requestData = async function() {
      
            // JSON: neighborhood paths
            const sf = await d3.json("SF-Neighborhoods.json");
            console.log(sf);
            
            // SFNeighborhoods property in objects
            var neighborhoods = topojson.feature(sf, sf.objects.SFNeighborhoods);
            
            //  MAP PROJECTION: Mercator; latitude lines flat
            var projection = d3.geoMercator().fitSize([mapWidth, mapHeight], neighborhoods);
            var path = d3.geoPath().projection(projection);
            
            // Draw neighborhoods
            map.selectAll("path.neighborhood").data(neighborhoods.features)
                .join("path")
                .attr("class", "neighborhood")
                .attr("d", path);
                    
            // DATA: Palm trees in San Francisco
            const trees = await d3.csv("palmTrees-02.csv");
        
            // Process data to position dots
            trees.forEach( d => {
                // Use the projection just like a scale to convert from lng/lat to pixels
                d.Position = projection( [d.Longitude, d.Latitude] );
            });
      
            // Draw circles using the Positions
            map.selectAll("circle").data(trees)
                .join("path")
                .attr("d", d => {
                    if (d.year > 1971) {
                        return d3.symbol().type(d3.symbolCircle).size(70)() // has plant date              
                    }
                    else {
                        return d3.symbol().type(d3.symbolCircle).size(30)() // no plant date         
                    }
                }) 
                .attr("fill", d => {
                    if (d.year > 1971) {
                        return "#264116" // has plant date              
                    }
                    else {
                        return "#4E9258" // no plant date  
                    }
                })
                .attr("opacity", d => {
                    if (d.year > 1971) {
                        return "1" // has a plant date              
                    }
                    else {
                        return ".5" // np plant date      
                    }
                })
                .attr("transform", d => `translate(${d.Position[0]},${d.Position[1]})`);
        
            // Add Ferry Building to the map
            map.selectAll("circle").data(ferryBuilding)
                .join("circle")
                    .attr("cx", d => projection([d.long, d.lat])[0])
                    .attr("cy", d => projection([d.long, d.lat])[1])
                    .attr("r", 10)
                    .style("fill", "#DC381F")
                    .attr("stroke", "#DC381F")
                    .attr("stroke-width", 3)
                    .attr("fill-opacity", .4);
            
            // map.selectAll("circle").data(trees)
            //  .join("circle")
            //  .attr("r", 3)
            //  .attr("fill", "#347235")
            //  .attr("opacity", 0.5)
            //  .attr("cx", d => d.Position[0])
            //  .attr("cy", d => d.Position[1]);
        };
        requestData();
    
    </script>
   
   
    </div>
</body>
</html>
  